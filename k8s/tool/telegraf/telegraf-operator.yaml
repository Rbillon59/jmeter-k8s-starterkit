apiVersion: v1
kind: Namespace
metadata:
  name: telegraf-operator
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: telegraf-operator
  labels:
    app: telegraf-operator
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "list"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: telegraf-operator
  labels:
    app: telegraf-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: telegraf-operator
subjects:
  - kind: ServiceAccount
    name: telegraf-operator
    namespace: telegraf-operator
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
webhooks:
  - name: telegraf.influxdata.com
    # enable the example below to limit to namespaces with specific labels only
    # namespaceSelector:
    #   matchLabels:
    #     controller: telegraf-operator
    admissionReviewVersions: ["v1"]
    sideEffects: None
    clientConfig:
      service:
        name: telegraf-operator
        namespace: telegraf-operator
        path: "/mutate-v1-pod"
      caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZwRENDQTR5Z0F3SUJBZ0lVZHZzQTlwWGRxZ2xBWk9hem9LUVdNM1VwRlRFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1ZERUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1SWXdGQVlEVlFRSERBMVRZVzRnUm5KaApibU5wYzJOdk1STXdFUVlEVlFRS0RBcEpibVpzZFhoRVlYUmhNUXN3Q1FZRFZRUUxEQUpKVkRBZUZ3MHlNVEV4Ck1EVXhOVEF6TkROYUZ3MHpNVEV4TURNeE5UQXpORE5hTUZReEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUkKREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFVE1CRUdBMVVFQ2d3S1NXNW1iSFY0UkdGMApZVEVMTUFrR0ExVUVDd3dDU1ZRd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURiCitiL1pNNWpJL1hoejdQckk4MGk3VnhpOGtXdElzREF5QnBvOTFYdzJ4V2pEYW9QTG1Gd2lmaXo4OGdWNVB2Q20KVUhkd3FtR3R3ek1lMHlHUndJcUErbTFYRUI4UEhvUHpLMU5qZmgrRHkzRThxTFhxdWpyOFdORElLZjVBT1JZWAp4UEZuMExqSUFNQUtTcDFXSkFyaTdNS09YU0tOSTVSRFIwMDIrTkg1WStsa1dJU3BHMEVGUU9zeWM1UTZmK2lWCkN2VlgrVFZibllrK3hxWkx0RWFjczFhZ2w5QVZ6bmhpemtRTEpOTzlybDJEVDJpcis3dndaQkV2N3JlN280ZzEKTWsvbjYyTFF4RGVBUlNaQVpWbGUrQzFXcGh6TkRtS1JtbnhTZ2VKQ3RmU01SM0VyaEl3cDFmVGhpMFgyenZlRQpsbHBnK2VKLzVUOUtaaGhzcmJscFQ5RlNhbUFzOU9xd2pCbjAxVWVzdTZnNDhMRENTQ3AxWEhlN3ltbUp4TythCi9XOG5aNmZOeEVrbE9DaFBPTDNCMVErcnQrczZsSjJsZmxoSkZHTGd2TE5IbkJZb1JRT1E2TEVrbkNFRkZrNzIKY254WGNrLzVyQTIwY0ZqaStMSFNHRlRlaDRqdk5GMVMxQnJJMmR5RjV4dTk5bXYxSjJldmFmakNsWDhQZ3RuMgpwZkRmL3I4cVV1SjJGNGRVL3hiSUZMVTArM2pPdzQyeDVsVkc1YnFoWE14OXkzMXVtQ0lGcVVCUzVMK1FrbldVCjBYYVpYQ3V0ajBTakI1a3lTM1BiQWxhN2VIa2dnNjFQU3hKVlBiWElnTGtTMHFaOUsvaTZyVWc5djNmY1c4d2oKeTc4Yi8xZVlEK1VWRUVoVzkrVndoNkoyRlI5WkJ0VXM3QnZJTEJqdm9RSURBUUFCbzI0d2JEQnFCZ05WSFJFRQpZekJoZ2hGMFpXeGxaM0poWmkxdmNHVnlZWFJ2Y29JamRHVnNaV2R5WVdZdGIzQmxjbUYwYjNJdWRHVnNaV2R5CllXWXRiM0JsY21GMGIzS0NKM1JsYkdWbmNtRm1MVzl3WlhKaGRHOXlMblJsYkdWbmNtRm1MVzl3WlhKaGRHOXkKTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUEycmZnNEp1QlUvQys4dFZRVC9zdHB1ZTJDL2thOUZBNQpWVVBKTlRYWnh6N1BhNlFYc2VCaU1wUU5XSlhkbC9FV2V0MVZSSEtmM211RTV0S3h3dmxLZ0tsemRDZXluQjNDCmJwQTVwZ0VGaHRVeFdmMTlMSFp4c3NOcHU1Mk5PSzJEc2s2L0t0ZmZNMUN6aGhGUzVMVTJkQVA4bmt6czNwWTcKS0VmaFFkRHcxVlZuYkxlRzVOdGtDY2hsRG9HUTlobmkwT29zK296Y0oybFR1b1F0bm9xdXZ5YjQzdTUyRnl6aApUS2lWcFpyd0VuN2ZLdUZFdmExTVhIUS9aSXNjNXJ0bFpqeXBMY2o0RS95aHM5M3dsZVdCVnY4cmNoUTdzd3duCjZNaWQwY3lJTGR2bThCQm1nYUtvdmFqc2g2dWNubGkrWGxsTFYyWDNEaUg5aFBmd1phS2FIT0ptYldWenhsa2IKNXNvamFqYXVqMWxXeXEwRjZoZVIvb2RlekJEV2xKTnlBTW9rY3FTUXhGbERnR0RldDd1dktiVVlXYkkzQ2NjQgpYY2YrZSt5a1FRaEg4YStoakw5QVFiN2hBVVBwN3NmY2FVQW4xSWcwQzFaOWxmZ21GTXRMMmY1UDgyYWhVUGkvCnhOalUrZ2RSUmcwdjJFbGRjTlZKUXA1RzluSllEdjBncGdkbHZCUDB3SU9vSXB4Y0cwSTJrcU8wVkxsWVpkVXQKOFlaWXJYL1d4THJpbDhNVng0YkZURFd6bWt6Lzh0S0dNcFBueU5qVXNLaWR1amdpdFhOeTRaWEpLK3NaWFdLUwpDYmJRZXI5aTVVa0tSK0VZOUhkY3lCbCtHdGFHNGhvMEVVMTg2VkNkWmlBQW5mZ0FldW15UHhVMWNSYlBXVjFCCkpqNi9scWdMdVZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    objectSelector:
      matchExpressions:
        - key: "telegraf.influxdata.com/ignore"
          operator: DoesNotExist
    rules:
      - operations: ["CREATE", "DELETE"]
        apiGroups: [""]
        apiVersions: ["v1"]
        resources: ["pods"]
    failurePolicy: Fail
    reinvocationPolicy: IfNeeded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: telegraf-operator
  template:
    metadata:
      labels:
        app: telegraf-operator
        telegraf.influxdata.com/ignore: "true"
    spec:
      serviceAccountName: telegraf-operator
      containers:
        - name: controller
          image: quay.io/influxdb/telegraf-operator:v1.3.11
          # use IfNotPresent image pull policy to allow pushing / injecting
          # container images to Kubernetes directly (such as when using kind)
          imagePullPolicy: IfNotPresent
          args:
            # for development purposes, enable internal plugin to report
            # telegraf metrics even if no other data is available
            - --enable-default-internal-plugin=true
            # default class to use if not specified by the pod
            - --telegraf-default-class=basic
            - --telegraf-classes-directory=/config/classes
            # allow injecting telegraf-istio sidecar for pods with
            # istio sidecar annotations enabled
            - --enable-istio-injection=true
            # if telegraf image supports it (as of version 1.19.2), telegraf-watch-config can be
            # set to enable telegraf-opeator and telegraf hot reloading changes to classes secret
            - --telegraf-watch-config=inotify
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: https
              containerPort: 9443
              protocol: TCP
          volumeMounts:
            - name: certs
              readOnly: true
              mountPath: "/etc/certs"
            - name: telegraf-operator-classes
              readOnly: true
              mountPath: "/config/classes"
      volumes:
        - name: certs
          secret:
            secretName: telegraf-operator-certs
        - name: telegraf-operator-classes
          secret:
            secretName: telegraf-operator-classes
---
apiVersion: v1
kind: Service
metadata:
  name: telegraf-operator
  namespace: telegraf-operator
  labels:
    app: telegraf-operator
spec:
  ports:
    - port: 443
      targetPort: 9443
      protocol: TCP
      name: https
  selector:
    app: telegraf-operator
---
apiVersion: v1
kind: Secret
metadata:
  name: telegraf-operator-certs
  namespace: telegraf-operator
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZwRENDQTR5Z0F3SUJBZ0lVZHZzQTlwWGRxZ2xBWk9hem9LUVdNM1VwRlRFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1ZERUxNQWtHQTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1SWXdGQVlEVlFRSERBMVRZVzRnUm5KaApibU5wYzJOdk1STXdFUVlEVlFRS0RBcEpibVpzZFhoRVlYUmhNUXN3Q1FZRFZRUUxEQUpKVkRBZUZ3MHlNVEV4Ck1EVXhOVEF6TkROYUZ3MHpNVEV4TURNeE5UQXpORE5hTUZReEN6QUpCZ05WQkFZVEFsVlRNUXN3Q1FZRFZRUUkKREFKRFFURVdNQlFHQTFVRUJ3d05VMkZ1SUVaeVlXNWphWE5qYnpFVE1CRUdBMVVFQ2d3S1NXNW1iSFY0UkdGMApZVEVMTUFrR0ExVUVDd3dDU1ZRd2dnSWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUNEd0F3Z2dJS0FvSUNBUURiCitiL1pNNWpJL1hoejdQckk4MGk3VnhpOGtXdElzREF5QnBvOTFYdzJ4V2pEYW9QTG1Gd2lmaXo4OGdWNVB2Q20KVUhkd3FtR3R3ek1lMHlHUndJcUErbTFYRUI4UEhvUHpLMU5qZmgrRHkzRThxTFhxdWpyOFdORElLZjVBT1JZWAp4UEZuMExqSUFNQUtTcDFXSkFyaTdNS09YU0tOSTVSRFIwMDIrTkg1WStsa1dJU3BHMEVGUU9zeWM1UTZmK2lWCkN2VlgrVFZibllrK3hxWkx0RWFjczFhZ2w5QVZ6bmhpemtRTEpOTzlybDJEVDJpcis3dndaQkV2N3JlN280ZzEKTWsvbjYyTFF4RGVBUlNaQVpWbGUrQzFXcGh6TkRtS1JtbnhTZ2VKQ3RmU01SM0VyaEl3cDFmVGhpMFgyenZlRQpsbHBnK2VKLzVUOUtaaGhzcmJscFQ5RlNhbUFzOU9xd2pCbjAxVWVzdTZnNDhMRENTQ3AxWEhlN3ltbUp4TythCi9XOG5aNmZOeEVrbE9DaFBPTDNCMVErcnQrczZsSjJsZmxoSkZHTGd2TE5IbkJZb1JRT1E2TEVrbkNFRkZrNzIKY254WGNrLzVyQTIwY0ZqaStMSFNHRlRlaDRqdk5GMVMxQnJJMmR5RjV4dTk5bXYxSjJldmFmakNsWDhQZ3RuMgpwZkRmL3I4cVV1SjJGNGRVL3hiSUZMVTArM2pPdzQyeDVsVkc1YnFoWE14OXkzMXVtQ0lGcVVCUzVMK1FrbldVCjBYYVpYQ3V0ajBTakI1a3lTM1BiQWxhN2VIa2dnNjFQU3hKVlBiWElnTGtTMHFaOUsvaTZyVWc5djNmY1c4d2oKeTc4Yi8xZVlEK1VWRUVoVzkrVndoNkoyRlI5WkJ0VXM3QnZJTEJqdm9RSURBUUFCbzI0d2JEQnFCZ05WSFJFRQpZekJoZ2hGMFpXeGxaM0poWmkxdmNHVnlZWFJ2Y29JamRHVnNaV2R5WVdZdGIzQmxjbUYwYjNJdWRHVnNaV2R5CllXWXRiM0JsY21GMGIzS0NKM1JsYkdWbmNtRm1MVzl3WlhKaGRHOXlMblJsYkdWbmNtRm1MVzl3WlhKaGRHOXkKTG5OMll6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FnRUEycmZnNEp1QlUvQys4dFZRVC9zdHB1ZTJDL2thOUZBNQpWVVBKTlRYWnh6N1BhNlFYc2VCaU1wUU5XSlhkbC9FV2V0MVZSSEtmM211RTV0S3h3dmxLZ0tsemRDZXluQjNDCmJwQTVwZ0VGaHRVeFdmMTlMSFp4c3NOcHU1Mk5PSzJEc2s2L0t0ZmZNMUN6aGhGUzVMVTJkQVA4bmt6czNwWTcKS0VmaFFkRHcxVlZuYkxlRzVOdGtDY2hsRG9HUTlobmkwT29zK296Y0oybFR1b1F0bm9xdXZ5YjQzdTUyRnl6aApUS2lWcFpyd0VuN2ZLdUZFdmExTVhIUS9aSXNjNXJ0bFpqeXBMY2o0RS95aHM5M3dsZVdCVnY4cmNoUTdzd3duCjZNaWQwY3lJTGR2bThCQm1nYUtvdmFqc2g2dWNubGkrWGxsTFYyWDNEaUg5aFBmd1phS2FIT0ptYldWenhsa2IKNXNvamFqYXVqMWxXeXEwRjZoZVIvb2RlekJEV2xKTnlBTW9rY3FTUXhGbERnR0RldDd1dktiVVlXYkkzQ2NjQgpYY2YrZSt5a1FRaEg4YStoakw5QVFiN2hBVVBwN3NmY2FVQW4xSWcwQzFaOWxmZ21GTXRMMmY1UDgyYWhVUGkvCnhOalUrZ2RSUmcwdjJFbGRjTlZKUXA1RzluSllEdjBncGdkbHZCUDB3SU9vSXB4Y0cwSTJrcU8wVkxsWVpkVXQKOFlaWXJYL1d4THJpbDhNVng0YkZURFd6bWt6Lzh0S0dNcFBueU5qVXNLaWR1amdpdFhOeTRaWEpLK3NaWFdLUwpDYmJRZXI5aTVVa0tSK0VZOUhkY3lCbCtHdGFHNGhvMEVVMTg2VkNkWmlBQW5mZ0FldW15UHhVMWNSYlBXVjFCCkpqNi9scWdMdVZVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS0FJQkFBS0NBZ0VBMi9tLzJUT1l5UDE0Yyt6NnlQTkl1MWNZdkpGclNMQXdNZ2FhUGRWOE5zVm93MnFECnk1aGNJbjRzL1BJRmVUN3dwbEIzY0twaHJjTXpIdE1oa2NDS2dQcHRWeEFmRHg2RDh5dFRZMzRmZzh0eFBLaTEKNnJvNi9GalF5Q24rUURrV0Y4VHhaOUM0eUFEQUNrcWRWaVFLNHV6Q2psMGlqU09VUTBkTk52alIrV1BwWkZpRQpxUnRCQlVEck1uT1VPbi9vbFFyMVYvazFXNTJKUHNhbVM3UkduTE5Xb0pmUUZjNTRZczVFQ3lUVHZhNWRnMDlvCnEvdTc4R1FSTCs2M3U2T0lOVEpQNSt0aTBNUTNnRVVtUUdWWlh2Z3RWcVljelE1aWtacDhVb0hpUXJYMGpFZHgKSzRTTUtkWDA0WXRGOXM3M2hKWmFZUG5pZitVL1NtWVliSzI1YVUvUlVtcGdMUFRxc0l3WjlOVkhyTHVvT1BDdwp3a2dxZFZ4M3U4cHBpY1R2bXYxdkoyZW56Y1JKSlRnb1R6aTl3ZFVQcTdmck9wU2RwWDVZU1JSaTRMeXpSNXdXCktFVURrT2l4Skp3aEJSWk85bko4VjNKUCthd050SEJZNHZpeDBoaFUzb2VJN3pSZFV0UWF5Tm5jaGVjYnZmWnIKOVNkbnIybjR3cFYvRDRMWjlxWHczLzYvS2xMaWRoZUhWUDhXeUJTMU5QdDR6c09Oc2VaVlJ1VzZvVnpNZmN0OQpicGdpQmFsQVV1Uy9rSkoxbE5GMm1Wd3JyWTlFb3dlWk1rdHoyd0pXdTNoNUlJT3RUMHNTVlQyMXlJQzVFdEttCmZTdjR1cTFJUGI5MzNGdk1JOHUvRy85WG1BL2xGUkJJVnZmbGNJZWlkaFVmV1FiVkxPd2J5Q3dZNzZFQ0F3RUEKQVFLQ0FnQkk3R3liTnEycHc4MlFzTGthc1B3bGp1UVdieWJmdS9qZVBLNFpYWktHSGI5ek9QWmtJaWc1RHhjZQo2NlRBNHdxb04vakFrdHM2M1lFdThOTXFIR2hPQmJjRnE4U0FJSitobDNWWGdGSTJRTlZUUktLNkkrNjJCVU9CCmQ5cGZ0QTBNNkM4WE9XeG9jVWM0b2kreWhOUlBFaW9WUSs3V1Z6c3BhcFBBYTVCQVdzemVoVEhGVmRHaVNqa3UKU242VFBoLytlTm1JeG9iWHprdlhVY2VEUlVvN1hJQ1ZVSDZkSEF0d3hleHN2VktzaVFkYkpwSU9vYTlXSy9ZKwpxNmFoUDc5QjAySUdBbFNKM09LQlZXc3U0ZXBVdjNWWVNrMDE5VlRiN0JqV3lWUVd4WGRDb2RSMGxzWllnQ05rCk9lV0J3bTd2dDJCUzBjUXluZTd6WFJFdnhnKzJxbUk1SGs2MmlrWFpjUTZJQUtQUERzSlZRVURUUEdlcVFyQXEKdXUwZEgrQWF4d0dGYjFnbklTb204Y0dxbFRqUnZxQ3pYdVdacC8xUURJazdrUkQ4eTZ4YW54bGtCTGMxNWFKMwo5MlFzeDRSNm1HeEloWGQzcklTMmlRWWJJVUNuUktpWmVuSHRmNHRLbUhWbUQwOXNYcjFhZmRNa21SalVXRGpNCnVSLzN1Y1I2NmFpYThjb25Nem81SDY4Wno3RzFVYnJvazdhNlBoaXVINEhncWVheEY0L2JJLzFlOEhQbHNVMTMKZm8zYTFHWlo0UDBObUQzL2pjcERiMFA4QzZWUXNUTVdIYW03MDJhbUViQWR6ZFpzR1o2WXF2Rm5PSFpzQ0ExcgpkelN4VW95UktQZXhvQllYakloWVVXd2FjUjdVcGVQVFFFdmFnT0c2Z1gzNXJ2U2MrUUtDQVFFQTlPOFpKRmdSCktPaFY4Z0hSeVp4N1ZmNHE5UW1MaEhaZEJxZDg1MmJnQUg4clEzWjdnTXVvczVCUTExRzdqNDV2L1RSUTRrQnoKWlRoVFJWVHAvN3FVbnBqdXU3NWNBejRMRVpqWmI3U0dwYUllSHdjYlpoSlVBUzZqeUFYZk1NQ2VJTUd6VzNvdApCWjRNUDE0SlN3UmNYZXFMWVNmdUFHS1BHazZaeVNPek5oSFNzQkZldUtBa0tZajJQLzRpbjNpZDNiNXh3WkJtCm9qUm9uUStWazFjTUtWTU1rNjlYb0R6LzJSSWZWN3dXRlptVGZINzlMZkRyN1BEcnAwNndGN1pEbWVXRElmRHcKaWdmUEE5NXJkL2tPbHgzTzdoR281SnhSZDl6Q0FJL2RhTUVRUmQwelFGQmZPdVBDM1MzOTltV2ZBSVpmbzA4VwpmWkRkWTZFZ011Njhud0tDQVFFQTVlbjduamZ3SkFBOGYwYTNBUkR1bElWb3NiK2ZibUlUcERDUlZRYVRGY0IxCnJQV1VRVEcxVEhpS0pVMTg3cnhnTTVoUEZHK2sxSlZyWHFJaXkzUkR4SEdENUNNUktkQlZIbXp5d1RJZVN5U1YKYnpWbjlHUlVWeTdmR2MvTDBadGVYdkFjdkx6ZDFQOWwxVERtYnhWTC9PSFAzN0UwajgxZ0Jac28vTmtabGtoUApKOXpidzNzSjNtUm9Db2ZWL0FoWHFESnR2bi9xSXE1aG9NQUY0VTFmS1NRbDFOZ3FSV3Jzb1YxQTliUFU5SnZzCjRscUl4VE1aaWVRWG1rVlZCNjNrY0o5UzNXRTNBaFBlTll5cmFxeXpzTWUxTG1QVlJTWmtMdmdiMk92bTA1VnAKMmdEOGJUV20ydjREQlJLMnZPZ1VCZkFIYUd2UHFtdjYyR0wxVG9TcnZ3S0NBUUF3cWZTbjJPdUg0aWw1VE0wKwpybDErNTJIbmozN3QwWXFJRU96ckdQQjJpTTJ5dUs2dkYwZXNiWWJ5VU9YZ0R0L0hRZ2F6L1RRd0x6RzBPN3ZHCk9HN2cxK2ZPMjNKeW5uZ2FoZkRsbGN1T3l4Z0srQ0dFZFMzRmtsdXVHU1NRRGlVY3d2OTh0RmlQbmlnMnl0c3oKMFdqOHErWUhacVNONVFjanBldytIMTZ5NW5XaXo4Q3ZFL283V2wvNnRPWnlJc2ZTejh6UU5YMSt5c1RpTjc5egpKNzlkMG9kVUxHbFBoKzhaVk5WdlhBcFRQbEVrVWlMQlp2V28vUEVGSzhnbTNlcXVnQUErMVIwbGY0bXM3aHNTCkdpVEE5NFl1bk1tZXFrUXhlV1grTUpkQUFlUFd6YTBxSVEzYXFIZ0Y4K1phZHpSUktXR0ZFK2lYQ0JwRWVqWG8KaUxCbkFvSUJBRERINlZRVGlFY0xLY3JUWlNhN3dmTVBMenh2Yk5OTnlkOFBVdmFZVTRMTTkrcS9uRG9NNHV1YgpzNnZnZWY1cFIzd0s5OVJkTDdyUERSM2lCc0htSkM2ODZ2L3ZsTWVyWlRQMFo3a24raGQxWnFOVzBIeWhBT2dTCmtORjRMa1dGMG9zUUpQakNsY3FJZWNHM0ExMVVSbkFjTlMrLytHZithajRtUXBjTE5RdVd3Znl5Tm9xT1EzVEYKRnZJTkNoRFVjRXpHamxSWjdZSjRQMHlORVhKUktUeWdaOHAySnRuZHF1RTkyUGVJdFVsRkFBaXlyc3d3WUYzSwpZRnVpRkQxeDNzTXFlcmx2MCswRDdDU3VlUHhFTWtmeXgzVlZSejNKdkgzZXRJSGM0M2ZHL3RON1hCT0x5NkF4ClB0REh2Sy91Q2JtTXlQV1YwbFRWWGo2bEdHa1ZheDhDZ2dFQkFNNkQzVXhFZTZJQkxSNGNiUkFKUUh3cXBrNXoKZUNtdXVtUVRVd2xheVhvc25VeG9MMGxLK1hJTkRpWURraWJaLzZwQTRGOFNxYklETXJNdHQ5eU5WdW4zOU1Bbwp4WExrVTJjMlJHZTRGTUxPWGxvbW9RV014SjJKZHV5QkpJUVVJdm1jWmN2K3YxM3FyalZZZGRkVFUrK21MZVNHCm5wMlRsMlNOU00xQ2JTYUdzMjZtOEs1dVU4K1hqVHRLRnBSVTE2N1JPWnEyc0l5OHFjZmJxM0lsNVRMVmtOZSsKV0FENWo1L3BTenp4YXEzM3J5KzdsYUtUNHpFelEvUUt3dnR4Z1NVbmJ5ZlNLLzJRdnkyWXdLUWtLYmZ4YWRZdQpSR081RXRFRURuS0Q3Q0tvMkgvZjNPTW9TRU9hb3lqTnNJcTJ0YTJZRUE5dkg5aHd0TC9wM3dtOS93TT0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K
type: kubernetes.io/tls
---
apiVersion: v1
kind: Secret
metadata:
  name: telegraf-operator-classes
  namespace: telegraf-operator
stringData:
  # basic classes that can be used to develop telegraf-operator ; these classes
  # report to InfluxDB v1 in same cluster as well as to stdout for convenience
  app: |+
    [[outputs.influxdb]]
      urls = ["http://influxdb:8086"]
    [[outputs.file]]
      files = ["stdout"]
    [global_tags]
      hostname = "$HOSTNAME"
      nodename = "$NODENAME"
      type = "app"